@model MODELS.NGHIEPVU.MODELParking
@{
    ViewData["Title"] = "PopupDetail";
}
<head>
    
<script src='https://cdn.jsdelivr.net/npm/@@goongmaps/goong-js@1.0.9/dist/goong-js.js'></script>
<link href='https://cdn.jsdelivr.net/npm/@@goongmaps/goong-js@1.0.9/dist/goong-js.css' rel='stylesheet' />
<script src="https://cdn.jsdelivr.net/npm/@@goongmaps/goong-geocoder@1.1.1/dist/goong-geocoder.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/@@goongmaps/goong-geocoder@1.1.1/dist/goong-geocoder.css" rel="stylesheet" />


</head>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "frmProduct", @class = "forms-sample" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.Id, new { id = "Id" })
    <div class="modal-header">
        <h4 class="modal-title" id="exampleModalLabel">Thêm mới bãi đậu xe</h4>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" onclick="closePopUp()"></button>
    </div>
    <div class="modal-body">
        <div class="form-group">
            <!-- Row 1: Parking Code và Name -->
            <div class="row">
                <div class="col-md-6">
                    <div class="mb-3">
                        <label class="col-form-label">
                            Mã bãi đậu xe
                        </label>
                        @Html.TextBoxFor(model => model.ParkingCode, new { @class = "form-control", id = "ParkingCode" })
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="mb-3">
                        <label class="col-form-label">
                            Tên bãi đậu xe
                        </label>
                        @Html.TextBoxFor(model => model.Name, new { @class = "form-control", id = "Name" })
                    </div>
                </div>
            </div>

            <!-- Row 2: Latitude và Longitude -->
            <div class="row">
                <div class="col-md-6">
                    <div class="mb-3">
                        <label class="col-form-label">
                            Vĩ độ
                        </label>
                        @Html.TextBoxFor(model => model.Latitude, new { @class = "form-control", id = "Latitude", @readonly = "readonly" })
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="mb-3">
                        <label class="col-form-label">
                            Kinh độ
                        </label>
                        @Html.TextBoxFor(model => model.Longitude, new { @class = "form-control", id = "Longitude", @readonly = "readonly" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12 text-end">
                    <button type="button" class="btn btn-primary" id="selectLocationButton">Chọn vị trí từ bản đồ</button>
                </div>
            </div>


            <!-- Row 3: Zip Code và Image -->
            <div class="row">
                <div class="col-md-6">
                    <div class="mb-3">
                        <label class="col-form-label">
                            Mã zip
                        </label>
                        @Html.TextBoxFor(model => model.ZipCode, new { @class = "form-control", id = "ZipCode" })
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="mb-3">
                        <label class="col-form-label">
                            Hình ảnh
                        </label>
                        <input class="form-control" type="file" id="formFile">
                    </div>
                </div>
            </div>

            <!-- Row 4: Address và District -->
            <div class="row">
                <div class="col-md-12">
                    <div class="mb-3">
                        <label class="col-form-label">
                            Địa chỉ
                        </label>
                        @Html.TextBoxFor(model => model.Address, new { @class = "form-control", id = "Address", @readonly = "readonly" })
                    </div>
                </div               
            </div>
            <div class="row">
                <div class="col-md-4">
                    <div class="mb-3">
                        <label class="col-form-label">
                            Tỉnh / Thành Phố
                        </label>
                        @Html.TextBoxFor(model => model.Address, new { @class = "form-control", id = "Address", @readonly = "readonly" })
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="mb-3">
                        <label class="col-form-label">
                            Quận / Huyện
                        </label>
                        @Html.TextBoxFor(model => model.District, new { @class = "form-control", id = "District", @readonly = "readonly" })
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="mb-3">
                        <label class="col-form-label">
                            Phường / Xã
                        </label>
                        @Html.TextBoxFor(model => model.Ward, new { @class = "form-control", id = "Ward", @readonly = "readonly" })
                    </div>
                </div>
            </div>

            <!-- Row 5: Province và Total Slots -->
            <div class="row">
                <div class="col-md-6">
                    <div class="mb-3">
                        <label class="col-form-label">
                            Tổng số chỗ
                        </label>
                        @Html.TextBoxFor(model => model.TotalSlots, new { @class = "form-control", id = "TotalSlots", type = "number" })
                    </div>
                </div>
            </div>

            <!-- Row 6: Description -->
            <div class="row">
                <div class="col-md-12">
                    <div class="mb-3">
                        <label class="col-form-label">
                            Mô tả
                        </label>
                        @Html.TextAreaFor(model => model.Description, new { @class = "form-control", id = "Description", rows = 3 })
                    </div>
                </div>
            </div>

            <!-- Row 7: Open Time và Close Time -->
            <div class="row">
                <div class="col-md-6">
                    <div class="mb-3">
                        <label class="col-form-label">
                            Giờ mở cửa
                        </label>
                        @Html.TextBoxFor(model => model.OpenTime, new { @class = "form-control", id = "OpenTime", type = "time" })
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="mb-3">
                        <label class="col-form-label">
                            Giờ đóng cửa
                        </label>
                        @Html.TextBoxFor(model => model.CloseTime, new { @class = "form-control", id = "CloseTime", type = "time" })
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal-footer">
        <button type="submit" id="btnLuu" class="btn btn-success"><i class="fas fa-check-square"></i> Lưu</button>
        <button type="button" class="btn btn-danger" data-bs-dismiss="modal" onclick="closePopUp()">Đóng</button>
    </div>
}


<!-- Modal Bootstrap -->
<div class="modal fade" id="mapModal" tabindex="-1" aria-labelledby="mapModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-fullscreen">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="mapModalLabel">Chọn vị trí trên bản đồ</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="map">
                   <div id="left" class="sidebar left collapsed sidebar-map">
                          <div class="sidebar-header">
                                <div class="btn-icon" onclick="toggleSidebar('left')">
                                    <i class="fa-solid fa-arrow-left"></i>
                                </div>
                                <span class="ms-3" style="color: black;">Thông tin địa điểm</span>
                           </div>
                        <div class="sidebar-info">
                             <div class="address">
                                <p id="full-address" class="address-title"></p>
                            </div>
                            <div class="coordinates">
                                <div class="coordinate-item">
                                    <span class="label">Latitude (Vĩ độ):</span>
                                    <span id="latitude-value" class="value">10.945273</span>
                                </div>
                                <div class="coordinate-item">
                                    <span class="label">Longitude (Kinh độ):</span>
                                    <span id="longitude-value" class="value">106.824964</span>
                                </div>
                            </div>                           
                        </div>
                    </div>
                </div>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Đóng</button>
                <button type="button" class="btn btn-primary" id="confirmLocation">Xác nhận vị trí</button>
            </div>
        </div>
    </div>
</div>






<script>
    

    


// Map initialization
goongjs.accessToken = 'yIjIEaQWjb9xRhAcXW7T1ilJSTjmoAFl1u4XjKSH';
const map = new goongjs.Map({
    container: 'map',
    style: 'https://tiles.goong.io/assets/goong_map_web.json',
    center: [106.824964, 10.945273],
    zoom: 13
});


// Resize map after modal is shown
const mapModal = document.getElementById('mapModal');
mapModal.addEventListener('shown.bs.modal', () => {
    map.resize(); // Cập nhật kích thước bản đồ
});


let currentMarker = null; // Biến lưu trữ marker hiện tại
let selectedLat = null;
let selectedLng = null;
let selectedAddress = null;

// Function to fetch address from coordinates using Goong API
async function fetchAddressFromCoordinates(lat, lng) {
    const apiKey = 'KYkkudSdfBH0NAtFwoHDGFiel5w83BaSaGgevbCW'; // Thay bằng API Key của bạn
    const url = `https://rsapi.goong.io/Geocode?latlng=${lat},${lng}&api_key=${apiKey}`;

    try {
        const response = await fetch(url);
        const data = await response.json();

        if (data && data.results && data.results.length > 0) {
            const addressComponents = data.results[0].address_components;

            // Update the UI using id selectors
            document.getElementById("latitude-value").textContent = lat.toFixed(6);
            document.getElementById("longitude-value").textContent = lng.toFixed(6);

            // Full address (number, street, etc.)
            const fullAddress = data.results[0].formatted_address || "Không xác định";
            document.getElementById("full-address").textContent = `${fullAddress}`;

            // Lưu trữ tọa độ và địa chỉ vào các biến toàn cục
            selectedLat = lat;
            selectedLng = lng;
            selectedAddress = fullAddress;

            console.log("Fetched Address:", fullAddress);
        } else {
            console.error("No address found for these coordinates.");
            alert("Không thể lấy địa chỉ từ vị trí này.");
        }
    } catch (error) {
        console.error("Error fetching address:", error);
        alert("Có lỗi xảy ra khi lấy địa chỉ.");
    }
}


// Function to handle adding marker and getting address
function handleMapClick(event) {
    const { lng, lat } = event.lngLat;

    if (currentMarker) {
        currentMarker.remove();
    }

    currentMarker = new goongjs.Marker({
        color: "blue",
    })
        .setLngLat([lng, lat]) // Đảm bảo thứ tự [lng, lat]
        .addTo(map);

    console.log(`Marker added at: Latitude ${lat}, Longitude ${lng}`);
    fetchAddressFromCoordinates(lat, lng); // Gọi đúng thứ tự lat, lng

    // Hiển thị sidebar
    const sidebar = document.getElementById('left');
    sidebar.classList.remove('collapsed');

}

 function toggleSidebar(id) {
    const elem = document.getElementById(id);
    const collapsed = elem.classList.contains('collapsed');
    
    if (collapsed) {
        elem.classList.remove('collapsed');
    } else {
        elem.classList.add('collapsed');
    }
}


// Thêm sự kiện click cho map
map.on("click", handleMapClick);

// Function to get user's current location and move the map
function getCurrentLocationAndMoveMap() {
    if ("geolocation" in navigator) {
        navigator.geolocation.getCurrentPosition(
            (position) => {
                const userLat = position.coords.latitude;
                const userLng = position.coords.longitude;

                map.flyTo({
                    center: [userLng, userLat],
                    zoom: 15,
                    speed: 1.5,
                    curve: 1,
                });

                console.log(`User's location: Latitude ${userLat}, Longitude ${userLng}`);

                if (currentMarker) {
                    currentMarker.remove();
                }

                currentMarker = new goongjs.Marker({
                    color: "blue",
                })
                    .setLngLat([userLng, userLat]) // Đảm bảo thứ tự [lng, lat]
                    .addTo(map);
                    toggleSidebar('left');
                fetchAddressFromCoordinates(userLat, userLng);
            },
            (error) => {
                console.error("Error getting location: ", error);
                alert("Không thể lấy được vị trí của bạn. Vui lòng kiểm tra cài đặt trình duyệt.");
            }
        );
    } else {
        alert("Trình duyệt của bạn không hỗ trợ chức năng định vị.");
    }
}

// Add event listener to automatically get the user's location when modal is shown
document.getElementById("mapModal").addEventListener("shown.bs.modal", () => {
    getCurrentLocationAndMoveMap();
});




// Add event listener to the confirm button
document.getElementById("confirmLocation").addEventListener("click", () => {
    if (selectedLat !== null && selectedLng !== null && selectedAddress !== null) {
        document.getElementById("Latitude").value = selectedLat.toFixed(6);
        document.getElementById("Longitude").value = selectedLng.toFixed(6);
        document.getElementById("Address").value = selectedAddress;

        // Close the modal
        var mapModal = bootstrap.Modal.getInstance(document.getElementById("mapModal"));
        mapModal.hide();
    } else {
        alert("Vui lòng chọn vị trí trên bản đồ trước khi xác nhận.");
    }
});






</script>



<script>
    // Khi nhấn nút "Chọn vị trí từ bản đồ"
    document.getElementById("selectLocationButton").addEventListener("click", function () {
        // Hiển thị modal với ID mapModal
        var mapModal = new bootstrap.Modal(document.getElementById("mapModal"));
        mapModal.show();
    });
</script>



